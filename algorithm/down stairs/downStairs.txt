<html>
<head>
  <title>Down stairs </title>
  <script language="javascript" type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/p5.js/0.6.1/p5.js"></script>
  <!-- uncomment lines below to include extra p5 libraries -->
  <script language="javascript" src="https://cdnjs.cloudflare.com/ajax/libs/p5.js/0.6.1/addons/p5.dom.js"></script>
  <!--<script language="javascript" src="https://cdnjs.cloudflare.com/ajax/libs/p5.js/0.6.1/addons/p5.sound.js"></script>-->

  <style>
  .dashboard{
    width:540px;
    display: flex;
  }
  
  .dashboard div:nth-child(1){
    flex:1;
    align-self: flex-start;
  }
  
  .dashboard div:nth-child(2){
    flex:1;
    align-self: flex-end;
  }
  
  .dashboard div:nth-child(2) .pp{
    text-align: right;
  }
  
  .go{
    display: flex;
    flex-direction: column;
    align-items: center;
    transform: translateX(-50%) translateY(-50%)
  }
  
  .go p{
    color: bisque;
    font-weight: bolder;
    font-size: 24px;
  }
  
  .go button{
    height: 25px;
    border-radius: 5px;
    border-color: transparent;
  }
  
  .go button:hover{
    background-color: darkgray;
  }
  </style>
</head>
<body>
  <div>
    <div class="dashboard">
      <div id="_p1"></div>
      <div id="_p2"></div>
    </div>
    <div id="sketch-holder">
  </div>
<script>
 

let Staircases;
let yShift = 2;
let stairLength = 100;
let newStairTimeinterval = 30;
let _width = 540;
let _height = 640;
let count = 0;
let timeCount = 0
let floorTime = 300;
let basement = 0
let gravity = 0.2;
let stepType = [{"type":"normal","prob":0.5},{"type":"spike","prob":0.2},{"type":"spring","prob":0.15},{"type":"slider-left","prob":0.05},{"type":"slider-right","prob":0.05},{"type":"flip","prob":0.05}]
let sliderSpeed = 3;
let Man;
let topSpikeWidth = 20;
let topSpikeIndex = 0;
let p1,p2;
let bounceSpeed = -6;
let life = 5; 


function keyPressed() {
    //left:37
    //right:39
    if(keyCode==37){
        Man.x -= 4;
        if(Man.x <=0){
            Man.x = 0
        }
    }else if(keyCode==39){
        Man.x += 4;
        if(Man.x >=_width){
            Man.x = _width;
        }
    }
    //console.log(keyCode); 
}

function drawTopSpikes(){
    noStroke();
    fill(178, 190, 181);

    while(topSpikeWidth*topSpikeIndex <= (_width+20)){
        triangle(topSpikeWidth*topSpikeIndex,0,topSpikeWidth*topSpikeIndex+topSpikeWidth/2,20,topSpikeWidth*topSpikeIndex+topSpikeWidth,0);   
        topSpikeIndex++;
    }
    topSpikeIndex = 0;
}

class stairCases{
    constructor(){
        this.steps = [];
    }

    addNewStair(){
        let newStep = new step
        this.steps.push(newStep);
        if(this.steps.length > 20){
            this.steps.shift();
        }
    }

    shiftStaircases(n){
        for(let i = 0; i < this.steps.length; i++){
            this.steps[i].y -= n;
        }
    }

    showAllStairs(){
        for(let i = 0; i < this.steps.length; i++){
            this.steps[i].drawStair();
        }
    }

    isFalling(x,y){
        let falling = true;
        for(let i = 0; i < this.steps.length; i++){
            if(this.steps[i].valid && x >= this.steps[i].x-10 && x <= (this.steps[i].x+stairLength)+10 && y<this.steps[i].y && (this.steps[i].y-y)<=15){
                Man.y = this.steps[i].y - 15;
                Man.yVel = -2;
                Man.onStair = this.steps[i];
                falling = false;
                break;
            }
        }

        if(falling){
            Man.onStair = null;
            Man.onSpikeCount = 0;
            Man.onFlipCount = 0;
            Man.color = [255,255,255]
            //console.log(Man.onStair)
            return true;
        }else{
            //console.log(Man.onStair)
            return false;
        }
    }
}

function pickStepType(){
    let index = 0;
    let r = random(1);
    while (r > 0) {
      r = r - stepType[index].prob;
      index++;
    }
    index--;
    return stepType[index].type;
}

class step{
    constructor(){
        this.x = floor(random(20,_width-stairLength-20))
        this.y = _height + 20;
        this.valid = true; 
        this.drawStair(); 
        this.type = pickStepType()
        //console.log(this.type)
    }

    drawStair(){
        switch (this.type) {
            case "normal":
                strokeWeight(10);
                stroke(255, 0, 255);
                line(this.x, this.y, this.x + stairLength, this.y);
                break;
            case "spike":
                strokeWeight(10);
                stroke(178, 190, 181);
                line(this.x, this.y, this.x + stairLength, this.y);
                noStroke();
                fill(178, 190, 181);
                triangle(this.x, this.y-4, this.x + stairLength*0.1, this.y-24, this.x + stairLength*0.2, this.y-4);
                triangle(this.x + stairLength*0.2, this.y-4, this.x + stairLength*0.3, this.y-24, this.x + stairLength*0.4, this.y-4);
                triangle(this.x + stairLength*0.4, this.y-4, this.x + stairLength*0.5, this.y-24, this.x + stairLength*0.6, this.y-4);
                triangle(this.x + stairLength*0.6, this.y-4, this.x + stairLength*0.7, this.y-24, this.x + stairLength*0.8, this.y-4);
                triangle(this.x + stairLength*0.8, this.y-4, this.x + stairLength*0.9, this.y-24, this.x + stairLength*1, this.y-4);                
                break;
            case "slider-left":
                noStroke();
                fill(179,242,255);
                triangle(this.x + stairLength*0, this.y, this.x + stairLength*0.2, this.y-5, this.x + stairLength*0.2, this.y+5);   
                triangle(this.x + stairLength*0.2, this.y, this.x + stairLength*0.4, this.y-5, this.x + stairLength*0.4, this.y+5);
                triangle(this.x + stairLength*0.4, this.y, this.x + stairLength*0.6, this.y-5, this.x + stairLength*0.6, this.y+5);
                triangle(this.x + stairLength*0.6, this.y, this.x + stairLength*0.8, this.y-5, this.x + stairLength*0.8, this.y+5);
                triangle(this.x + stairLength*0.8, this.y, this.x + stairLength*1, this.y-5, this.x + stairLength*1, this.y+5);
                break;
            case "slider-right":
                noStroke();
                fill(179,242,255);
                triangle(this.x + stairLength*0, this.y-5, this.x + stairLength*0, this.y+5, this.x + stairLength*0.2, this.y);   
                triangle(this.x + stairLength*0.2, this.y-5, this.x + stairLength*0.2, this.y+5, this.x + stairLength*0.4, this.y);
                triangle(this.x + stairLength*0.4, this.y-5, this.x + stairLength*0.4, this.y+5, this.x + stairLength*0.6, this.y);
                triangle(this.x + stairLength*0.6, this.y-5, this.x + stairLength*0.6, this.y+5, this.x + stairLength*0.8, this.y);
                triangle(this.x + stairLength*0.8, this.y-5, this.x + stairLength*0.8, this.y+5, this.x + stairLength*1, this.y);
                break;    
            case "spring":
                strokeWeight(2);
                stroke(0, 179, 89);
                line(this.x, this.y-4, this.x + stairLength, this.y-4);
                line(this.x, this.y+4, this.x + stairLength, this.y+4);
                break;
            case "flip":
                strokeWeight(10);
                if(this.valid){
                    stroke(205,149,117);
                }else{
                    stroke(255,0,255);
                }
                line(this.x, this.y, this.x + stairLength, this.y);
                break;
                
        }     
        //For spring
        // strokeWeight(2);
        // stroke(255, 0, 255);
        // line(this.x, this.y-4, this.x + stairLength, this.y-4);
        // line(this.x, this.y+4, this.x + stairLength, this.y+4);
    }
} 



function showGameover(){
    let go = createDiv(`<p>Game Over</p><p>Final Basement: ${basement}</p><button onclick='restart()'>Restart</button>`).addClass('go');
    go.position(_width*0.5,_height*0.5)
}

function restart(){
    window.location.reload();
}

class man{
    constructor(x,y){
        this.x = x;
        this.y = y;
        this.yVel = -2;
        this.color = [255,255,255];
        this.onStair = null;
        this.jump = false; //if the man step on the spring and jump
        this.onSpikeCount = 0 //count how long the man step on the spike
        this.onFlipCount = 0 //count how long the man step on the flip
    }
    showMan(){
        noStroke();
        fill(this.color[0],this.color[1],this.color[2]); 
        ellipse(this.x, this.y,20);   
    }

    fallingcontrol(){
      //let fallingSpeed = this.yVel;  
      this.yVel = this.yVel + gravity;
      this.y = this.y + this.yVel
    }
    
    isGameOver(){
        if(this.y > _height + 10 || life <= 0){
            showGameover();
            noLoop();
        }
    }

    isHitTop(){
        if(this.y <= 10 && this.onStair !=null ){
            life--;  
            //console.log('hit top',life)
            this.onStair.valid = false;
            this.onStair = null;
            this.color = [255,0,0];
        }else if(this.y <= 10 && this.jump){
            life--;  
            //console.log('jump hit top',life)
            this.y = 11
            this.yVel = 0;
            this.color = [255,0,0];
            //this.yVel = 0 + gravity;
            //this.y = this.y + this.yVel
        }
        
    }

    behavior(){
        switch (this.onStair.type) {
            case "normal":
                this.y = this.y - yShift;
                this.jump = false; 
                break;
            case "slider-left":
                this.x = this.x - sliderSpeed 
                this.y = this.y - yShift;
                this.jump = false; 
                break;
            case "slider-right":
                this.x = this.x + sliderSpeed 
                this.y = this.y - yShift;
                this.jump = false; 
                break;
            case "spike":
                this.onSpikeCount++
                this.color = [255,0,0];
                if(this.onSpikeCount==1){
                    //trigger only the first time
                    life--
                    //console.log('ouch !!!',life);         
                }
                this.y = this.y - yShift;
                this.jump = false; 
                break;
            case "spring":
                this.yVel = bounceSpeed 
                this.y = this.y + this.yVel
                //console.log('jump')
                this.jump = true; 
                break;
            case "flip":
                this.onFlipCount++
                if(this.onFlipCount==30){
                    //trigger when the count to 10
                    this.onStair.valid = false;
                    this.onStair = null;          
                }
                this.y = this.y - yShift;
                this.jump = false; 
                break;                 
            default:
        } 
    }
}

function setup(){
    let canvas = createCanvas(_width, 640);
    canvas.parent('sketch-holder');
    background(51);
    p1 = createP('');
    p2 = createP('');
    p1.parent('_p1');
    p2.parent('_p2').addClass('pp');

    Staircases = new stairCases();
    for(let i = 0; i < 20*newStairTimeinterval; i++){     
        if((i%newStairTimeinterval) == 0){
            Staircases.addNewStair();
        }
        Staircases.shiftStaircases(yShift)
    }
    Man = new man(Staircases.steps[18].x+(stairLength/2),Staircases.steps[18].y-15);
    Staircases.steps[18].type = "normal";
    Staircases.showAllStairs();
    
    Man.showMan();
    //noLoop();
    
}

function draw(){
    background(51);

    if(count  == 0){
        Staircases.addNewStair();
    }

    if(timeCount == floorTime-1){
      basement += 1;
    }
    
    if(keyIsPressed){
        keyPressed()
    }

    if(Staircases.isFalling(Man.x,Man.y)){
      //console.log('falling')
      Man.fallingcontrol();
    }else{
      Man.behavior();
    }
 
    Man.isHitTop();
    Man.isGameOver();

    Staircases.shiftStaircases(yShift)
    Staircases.showAllStairs();
    drawTopSpikes()
    Man.showMan();

    p1.html(`<span>life: ${life}</span>`);
    p2.html(`Basement: ${basement}`);
    count = (count+1) % newStairTimeinterval;
    timeCount = (timeCount+1) % floorTime;
}

</script> 
</body>
</html>